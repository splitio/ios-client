//
//  CertificatePinningConfig.swift
//  Split
//
//  Created by Javier L. Avrudsky on 04/08/2020.
//  Copyright Â© 2020 Split. All rights reserved.
//

import Foundation

public typealias CertificatePinningFailureHandler = (String) -> Void

/// Custom error type for certificate pinning errors, conforming to LocalizedError.
@objc
public class CertificatePinningError: NSObject, LocalizedError {
    private let message: String

    /// Initializes a new instance of CertificatePinningError with a custom message.
    /// - Parameter message: The error message.
    init(message: String) {
        self.message = message
    }

    /// Provides a localized description of the error.
    public var errorDescription: String? {
        return message
    }
}

/// Configuration class for Certificate Pinning.
@objc public class CertificatePinningConfig: NSObject {
    private(set) var pins: [CredentialPin]
    private(set) var failureHandler: CertificatePinningFailureHandler?

    /// Initializes a new instance of CertificatePinningConfig with an array of pins.
    /// - Parameter pins: Array of CredentialPin objects.
    init(pins: [CredentialPin],
         failureHandler: CertificatePinningFailureHandler?) {
        self.pins = pins
        self.failureHandler = failureHandler
    }

    /// Provides a builder for CertificatePinningConfig.
    @objc(builder)
    public static func builder() -> Builder {
        return Builder()
    }

    /// Builder class for constructing a CertificatePinningConfig.
    @objc(CertificatePinningConfigBuilder)
    public class Builder: NSObject {

        private enum PinType {
            case key
            case certificate
        }

        private struct Pin {
            let host: String
            let data: String
            let type: PinType
        }

        private let splitValidator = SplitNameValidator()
        private var builderPins = [Pin]()
        private var failHandler: CertificatePinningFailureHandler?

        // Visible for testing variable
        var bundle: Bundle = Bundle.main

        /// Builds and returns a CertificatePinningConfig with the added pins.
        /// - Throws: CertificatePinningError if any pin cannot be parsed.
        /// - Returns: A configured CertificatePinningConfig instance.
        @objc
        public func build() throws -> CertificatePinningConfig {
            var pins = [CredentialPin]()
            for pin in builderPins {
                let credential = (pin.type == .certificate ? try parseCertificate(pin: pin) : try parseHash(pin: pin))
                pins.append(credential)
            }
            return CertificatePinningConfig(pins: pins, failureHandler: failHandler)
        }

        /// Adds a certificate pin for the specified host.
        /// The certificate file must be in DER format.
        /// - Parameters:
        ///   - host: The host for which to add the pin.
        ///   - certificateName: The name of the certificate file (without the `.der` extension) located in the app bundle.
        ///                      The method will automatically look for a `.der` file with this name in the main bundle.
        ///                      Ensure the certificate file is correctly included in your app's bundle resources.
        /// - Returns: The Builder instance for chaining.
        @discardableResult
        @objc(addPinForHost:certificateName:)
        public func addPin(host: String, certificateName: String) -> CertificatePinningConfig.Builder {
            builderPins.append(Pin(host: host, data: certificateName, type: .certificate))
            return self
        }

        /// Adds a key hash pin for the specified host.
        /// - Parameters:
        ///   - host: The host for which to add the pin.
        ///   - keyHash: A string representing the base64-encoded key hash along with its hashing algorithm.
        ///              The format must follow the pattern `"algorithm/hash"`, where:
        ///              - `algorithm` is the name of the hashing algorithm used (e.g., `sha256`, `sha1`).
        ///              - `hash` is the base64-encoded hash value generated by applying the specified algorithm to the key.
        ///
        ///              Example Format:
        ///              - `"sha256/g8gd29aGVsbybEP="`
        ///
        ///              Detailed Example:
        ///              - If you have a key hash generated using the SHA-256 algorithm, it should look something like:
        ///                `"sha256/aGVsbG8gd29ybGQ="`, where `"aGVsbG8gd29ybGQ="` is the base64-encoded result of the hash.
        /// - Returns: The Builder instance for chaining.
        @discardableResult
        @objc(addPinForHost:hash:)
        public func addPin(host: String, keyHash: String) -> CertificatePinningConfig.Builder {
            builderPins.append(Pin(host: host, data: keyHash, type: .key))
            return self
        }

        /**
         Sets the failure handler for certificate pinning failures.

         This method allows you to specify a closure that will be called when a certificate pinning failure occurs.
         - Parameter handler: A closure that takes a `CertificatePinningFailureHandler` as its parameter. This closure will be called when a certificate pinning failure happens.
         - Note: The `handler` closure is marked as `@escaping` because it is stored for later use, rather than being called immediately within the method.
         - Example:
         ```swift
         certificatePinning.failureHandler { failureDetails in
             // Handle the failure, such as logging the event or notifying the user.
             print("Certificate pinning failed with details: \(failureDetails)")
         }
         ```
         **/

        public func failureHandler(_ handler: @escaping CertificatePinningFailureHandler) {
            failHandler = handler
        }

        /// Parses a certificate pin into a CredentialPin.
        /// - Parameter pin: The pin to parse.
        /// - Throws: CertificatePinningError if the certificate cannot be parsed.
        /// - Returns: A CredentialPin object.
        private func parseCertificate(pin: Pin) throws -> CredentialPin {
            // Add pin from certificate
            // It is important to take into account that this method could delay a bit the init process
            // TODO: Measure time
            guard let spki = TlsCertificateParser.spki(from: pin.data, bundle: bundle) else {
                throw errLog("Couldn't get SPKI from \(pin.data).der")
            }

            return CredentialPin(host: pin.host,
                                 hash: AlgoHelper.computeHash(spki.data, algo: .sha256),
                                 algo: .sha256)
        }

        /// Parses a key hash pin into a CredentialPin.
        /// - Parameter pin: The pin to parse.
        /// - Throws: CertificatePinningError if the key hash is invalid.
        /// - Returns: A CredentialPin object.
        private func parseHash(pin: Pin) throws -> CredentialPin {
            let hash = pin.data
            guard let separatorIndex = hash.firstIndex(of: "/") else {
                throw errLog("Unable to add pin for host \(pin.host), invalid key hash")
            }

            let algoName = String(hash[hash.startIndex..<separatorIndex])
            guard let algo = KeyHashAlgo(rawValue: algoName) else {
                throw errLog("Key hash algorithm not supported for pin: \(algoName)")
            }

            let keyHash = String(hash[hash.index(after: separatorIndex)..<hash.endIndex])
            guard let dataHash = Data(base64Encoded: keyHash) else {
                throw errLog("Key hash not valid for host \(pin.host) and algorithm: \(algoName)")
            }
            if dataHash.isEmpty {
                throw errLog("Key hash is empty for host \(pin.host) algorithm: \(algoName)")
            }
            return CredentialPin(host: pin.host, hash: dataHash, algo: algo)
        }

        /// Logs an error and returns a CertificatePinningError.
        /// - Parameter message: The error message.
        /// - Returns: A CertificatePinningError object.
        private func errLog(_ message: String) -> CertificatePinningError {
            Logger.e(message)
            return CertificatePinningError(message: message)
        }
    }
}
