name: Sonar Scan

on:
  push:
    branches: [ci]
  pull_request:
    branches: [master, development, "*_baseline"]

jobs:
  build-and-collect-coverage:
    name: Build & Collect Coverage
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests with coverage (ignore failures)
        continue-on-error: true
        run: |
          xcodebuild -quiet test \
            -project Split.xcodeproj \
            -scheme Split \
            -parallel-testing-enabled YES \
            -destination 'platform=iOS Simulator,OS=17.2,name=iPhone 15' \
            -enableCodeCoverage YES \
            -resultBundlePath build/Logs/Test/TestResults.xcresult

      - name: Export coverage to JSON
        run: |
          mkdir -p coverage
          xcrun xccov view --report --json build/Logs/Test/TestResults.xcresult > coverage/coverage.json

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/coverage.json

  sonar:
    name: Run SonarQube Scan
    runs-on: ubuntu-latest
    needs: build-and-collect-coverage
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage

      - name: Run SonarQube scan
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=splitio_ios-client
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.c.file.suffixes=-
            -Dsonar.cpp.file.suffixes=-
            -Dsonar.objc.file.suffixes=-
            -Dsonar.swift.coverage.reportPaths=coverage/coverage.json
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
