name: Release Tagging

on:
  pull_request:
    types: [closed]
    branches:
      - master
      - development

jobs:
  create-tag:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: macos-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Verify Version.swift contains correct version
        run: |
          VERSION_IN_FILE=$(grep -o 'private static let kVersion = "[^"]*"' Split/Common/Utils/Version.swift | cut -d'"' -f2)
          if [ "$VERSION_IN_FILE" != "${{ steps.extract-version.outputs.version }}" ]; then
            echo "❌ Error: Version in Version.swift ($VERSION_IN_FILE) does not match branch version (${{ steps.extract-version.outputs.version }})"
            exit 1
          fi
          echo "✅ Version.swift contains correct version: $VERSION_IN_FILE"

      - name: Verify Split.podspec contains correct version
        run: |
          PODSPEC_VERSION=$(grep -o "s.version          = '[^']*'" Split.podspec | cut -d"'" -f2)
          if [ "$PODSPEC_VERSION" != "${{ steps.extract-version.outputs.version }}" ]; then
            echo "❌ Error: Version in Split.podspec ($PODSPEC_VERSION) does not match branch version (${{ steps.extract-version.outputs.version }})"
            exit 1
          fi
          echo "✅ Split.podspec contains correct version: $PODSPEC_VERSION"

      - name: Create tag
        run: |
          echo "🏷️ Creating tag ${{ steps.extract-version.outputs.version }}..."
          git tag -a "${{ steps.extract-version.outputs.version }}" -m "Release ${{ steps.extract-version.outputs.version }}"
          git push origin "${{ steps.extract-version.outputs.version }}"

      - name: Verify tag in remote
        run: |
          echo "✅ Verifying tag ${{ steps.extract-version.outputs.version }} exists in remote..."
          sleep 5
          git fetch --tags
          
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.extract-version.outputs.version }}$"; then
            echo "✅ Tag ${{ steps.extract-version.outputs.version }} successfully created in remote"
          else
            echo "❌ Failed to verify tag ${{ steps.extract-version.outputs.version }} in remote"
            exit 1
          fi
          
  update-example-repo:
    needs: create-tag
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout example repository
        uses: actions/checkout@v4
        with:
          repository: splitio/example-ios-objc
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Create branch for update
        id: create-branch
        run: |
          VERSION="${{ needs.create-tag.outputs.version }}"
          BRANCH_NAME="update-split-sdk-to-$VERSION"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Update Podfile
        run: |
          VERSION="${{ needs.create-tag.outputs.version }}"
          # Update the Split SDK version in the Podfile
          sed -i "s/pod 'Split', '.*'/pod 'Split', '$VERSION'/" Podfile
      
      - name: Commit changes
        run: |
          VERSION="${{ needs.create-tag.outputs.version }}"
          git add Podfile
          git commit -m "chore: Update Split SDK to version $VERSION"
      
      - name: Push changes
        run: |
          git push origin "${{ steps.create-branch.outputs.branch_name }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: Update Split SDK to version ${{ needs.create-tag.outputs.version }}"
          title: "Update Split SDK to version ${{ needs.create-tag.outputs.version }}"
          body: |
            This PR updates the Split SDK dependency to version ${{ needs.create-tag.outputs.version }}.
            
            This PR was automatically created by the release workflow.
          branch: ${{ steps.create-branch.outputs.branch_name }}
          base: master
          delete-branch: true

      - name: Comment on original PR
        if: steps.create-pr.outputs.pull-request-url
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const examplePrUrl = '${{ steps.create-pr.outputs.pull-request-url }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ PR created: ${examplePrUrl}`
            });
